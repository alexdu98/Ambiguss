{% extends '@Administration/Administration/base_admin.html.twig' %}

{% block title %}Gloses{% endblock %}
{% block titre %}Gloses{% endblock %}

{% block contenu %}
	<div class="col-md-8 col-md-offset-2 well">
		{{ form_start(form) }}
		<div class="form-group">
			<div class="row">
				<div class="col-md-3">
					{{ form_label(form.idGlose) }} {{ form_widget(form.idGlose) }}
				</div>
			</div>
		</div>
		<div class="form-group">
			<div class="row">
				<div class="col-md-12">
					{{ form_label(form.contenuGlose) }} {{ form_widget(form.contenuGlose) }}
				</div>
			</div>
		</div>
		<div class="form-group">
			<div class="row">
				<div class="col-md-3">
					{{ form_label(form.idAuteur) }} {{ form_widget(form.idAuteur) }}
				</div>
				<div class="col-md-9">
					{{ form_label(form.PseudoOrEmailAuteur) }} {{ form_widget(form.PseudoOrEmailAuteur) }}
				</div>
			</div>
		</div>
		{{ form_row(form.Chercher) }}

		{{ form_rest(form) }}
		{{ form_end(form) }}
	</div>

	<div class="col-md-12 well">
		<table id="glosesTable" class="display responsive no-wrap table table-striped table-bordered" cellspacing="0" width="100%">
			<thead>
			<tr>
				<th>#</th>
				<th>Valeur</th>
				<th>Auteur</th>
				<th>Date de création</th>
				<th>Modificateur</th>
				<th>Date de modification</th>
				<th>Signalée</th>
				<th>Visible</th>
				<th>Actions</th>
			</tr>
			</thead>
			<tfoot>
			<tr>
				<th>#</th>
				<th>Valeur</th>
				<th>Auteur</th>
				<th>Date de création</th>
				<th>Modificateur</th>
				<th>Date de modification</th>
				<th>Signalée</th>
				<th>Visible</th>
				<th>Actions</th>
			</tr>
			</tfoot>
			<tbody></tbody>
		</table>
	</div>
{% endblock %}

{% block js %}
	<script src="{{ asset('assets/vendor/DataTables/datatables.js') }}"></script>
	<script>
		$(document).ready(function () {

			// Autocomplete le champ
			var input = $('#administrationbundle_glose_PseudoOrEmailAuteur');
			input.autocomplete({
				minLength: 2, // Dès qu'il y a 2 caractères on autocomplete
				source: function (request, response) {
					var url = "{{ path('user_get_pseudo_email') }}";
					$.getJSON(url + '?term=' + request.term, function (data) {
						input.parent().append('<div id="resnul" class="text-danger" hidden>Aucun membre ne corespond à la recherche</div>');
						if (data.length === 0) {
							input.parent().find('#resnul').show();
						} else {
							input.parent().find('#resnul').hide();
						}
						// On récupère une liste d'objet, on veut l'attribut valeur de l'objet
						response($.map(data, function (item) {
							tab = {
								label: item.pseudo + " (" + item.email + ")",
								value: item.id
							};
							return tab;
						}));
					});
				},
				select: function (e, ui) {
					e.preventDefault();
					$('#administrationbundle_glose_idAuteur').val(ui.item.value);
					$('#administrationbundle_glose_PseudoOrEmailAuteur').val(ui.item.label);
				}
			}).data("ui-autocomplete")._renderItem = function (ul, item) {
				return $("<li>")
					.attr("data-value", item.value)
					.append($("<a>").html(item.label.replace(new RegExp(this.term, 'gi'), "<b>$&</b>")))
					.appendTo(ul);
			};

			var table = $('#glosesTable').DataTable({
				stateSave: true, // Enregistre les configurations
				stateSaveParams: function (settings, data) {
					data.start = 0; // On enregistre pas la page
					data.order = [[0, "desc"]]; // On ordonne sur l'id
					data.search = {}; // On enregistre pas la recherche
				},
				stateDuration: 0, // pour une durée illimitée
				columnDefs: [
					{targets: 8, orderable: false}
				],
				order: [[0, 'asc']], // On ordonne sur l'id
				responsive: true,
				language: {url: '{{ asset('assets/vendor/DataTables/datatables.french.lang') }}'}
			});

			// On envoit le formulaire par ajax
			$('form[name="administrationbundle_glose"]').ajaxForm({
				beforeSubmit: function (arr, form, opt) {
					// On affiche l'image laoding en attendant la réponse
					$(form).after('<img src="' + urlImageLoading + '" id="loading">');
				},
				// Quand la réponse Ajax sera reçu, on appelle ce callback
				success: function (data, status, xhr, form) {
					// On supprime l'image loading
					$(form).next().remove();
					if (data.succes) {
						table.clear();
						$.each(data.gloses, function () {
							this.push('<button class="btn btn-warning btn-sm editGloseButton" data-toggle="modal" data-target="#modal" data-id="' + this[0] + '" data-valeur="' + this[1] + '">Modifier </button>');

							var dateC = new Date(this[3] * 1000);
							if (this[3] != '') {
								dateCC = dateC.getDate() + '/' + (dateC.getMonth() + 1) + '/' + dateC.getFullYear() + ' ' +
									dateC.getHours() + ':' + dateC.getMinutes();
							}
							else {
								dateCC = '';
							}

							var dateM = new Date(this[5] * 1000);
							if (this[5] != '') {
								dateMC = dateM.getDate() + '/' + (dateM.getMonth() + 1) + '/' + dateM.getFullYear() + ' ' +
									dateM.getHours() + ':' + dateM.getMinutes();
							}
							else {
								dateMC = '';
							}

							table.row.add($('<tr id="row-' + this[0] + '">' +
								'<td>' + this[0] + '</td>' +
								'<td class="glose-valeur">' + this[1] + '</td>' +
								'<td>' + this[2] + '</td>' +
								'<td data-order="' + this[3] + '">' + dateCC + '</td>' +
								'<td class="glose-modificateur">' + this[4] + '</td>' +
								'<td class="glose-dateModification" data-order="' + this[5] + '">' + dateMC + '</td>' +
								'<td class="glose-signale">' + this[6] + '</td>' +
								'<td class="glose-visible">' + this[7] + '</td>' +
								'<td>' + this[8] + '</td></tr>'));
						});
						table.draw();

						// Au click sur le bouton, exécute la fonction
						$('.editGloseButton').click(editGloseModal);
						function editGloseModal(event) {
							var button = $(this);
							setModalSize('modal-lg');
							setModalTitle('Modifier la glose "' + button.data('valeur') + '"');
							setModalBody('{{ include('AmbigussBundle:Glose:edit.html.twig', {'form': editGloseForm})|e('js') }}');

							$("#toggleJugements").click(function () {
								$("#jugements").toggle("slow");
							});

							// Récupère les jugements en cours
							$.post('{{ path('jugement_glose') }}', {id: button.data('id')}, function (data) {
								if (data.succes) {
									divJugement = $('#jugements');
									if (data.jugements.length === 0)
										divJugement.append('<span class="text-danger">Aucun jugement en cours</span>');
									html = '{{ include('@Judgment/Jugement/jugement.html.twig')|e('js') }}';
									$.each(data.jugements, function (index) {
										clone = $(html);
										clone.find('.panel-heading').append(data.jugements[index].categorieJugement);
										clone.find('.panel-body').append(data.jugements[index].description);
										var profil = Routing.generate('user_profil', {id: data.jugements[index].auteur_id});
										var dt = new Date(data.jugements[index].dateCreation * 1000);
										var date = dt.getDate() + '/' + (dt.getMonth() + 1) + '/' + dt.getFullYear() + ' à ' + dt.getHours() + ':' + dt
												.getMinutes();
										clone.find('.lien-profil').attr('href', profil);
										clone.find('.lien-profil').append(data.jugements[index].auteur);
										clone.find('.date-creation').append(date);

										// Ajout de l'eventlistener valide
										clone.find('.signalement').click(function (event) {
											event.preventDefault();

											// On affiche l'image laoding en attendant la réponse
											$(this).after('<img src="' + urlImageLoading + '" id="loading">');

											$.post('{{ path('jugement_edit') }}', {
												id: data.jugements[index].id, verdict: $(this).data('verdict'), token: '{{ csrf_token
												('jugement_vote') }}'
											}, function
												(data) {
												if (data.succes) {
													clone.remove();
												}
												else {
													clone.append('<span class="text-danger">Erreur (' + data.message + ')</span>')
												}
											})
												.fail(function () {
													$(this).after('<span class="text-danger">Erreur</span>');
												})
												.always(function () {
													$('#loading').remove();
												});
										});

										divJugement.append(clone);
									});
								}
								else {

								}
							}, "json");

							$('#glose_edit_valeur').val(button.data('valeur'));
							var form = $('form[name="glose_edit"]');
							var action = form.attr('action');
							form.attr('action', action + '/' + button.data('id'));
							form.ajaxForm({
								beforeSubmit: function (arr, form, opt) {
									// On affiche l'image laoding en attendant la réponse
									$(form).after('<img src="' + urlImageLoading + '" id="loading">');
								},
								// Quand la réponse Ajax sera reçu, on appelle ce callback
								success: function (data, status, xhr, form) {
									// On supprime l'image loading
									$(form).next().remove();
									if (data.succes) {
										if (data.glose.id == button.data('id')) {
											// On trouve la ligne
											var row = button.parents('tr');
											// On met à jour la ligne
											row.find('.glose-valeur').html(data.glose.valeur);
											row.find('.glose-modificateur').html('<a href="#">' + data.glose.modificateur + '</a>');
											row.find('.glose-dateModification').html(data.glose.dateModification);
											var signale = data.glose.signale === "0" ? 'false' : 'true';
											var visible = data.glose.visible === "0" ? 'false' : 'true';
											button.data('valeur', data.glose.valeur);
											row.find('.glose-signale').html(signale);
											row.find('.glose-visible').html(visible);
											// On trouve la ligne, on l'a met à jour
											$('#glosesTable').DataTable().row('#glose-' + button.data('id')).invalidate().draw();
											// On cache la modale
											$('#modal').modal('hide');
										}
										else {
											// On trouve la ligne et on l'a supprime
											$('#glosesTable').DataTable().row(button.parents('tr')).remove().draw();
											$(form).after('<span class="text-info">La glose existait déjà (id : ' + data.glose.id + '), les réponses et ' +
												'les liaisons avec les mots ambigus ont donc étaient fusionnées.</span>');
										}
									}
									else {
										$(form).after('<span class="text-danger">Erreur (' + data.message + ')</span>');
									}
								},
								error: function () {
									loading = $("#loading");
									next = loading.prev().nextAll();
									loading.before('<span class="text-danger">Erreur</span>');
									next.remove();
								}
							});
						}
					}
					else {
						$(form).after('<div class="alert alert-danger alert-dismissible fade in" role="alert">'
							+ '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>'
							+ 'Erreur</div>');
					}
				},
				error: function () {
					loading = $("#loading");
					next = loading.prev().nextAll();
					loading.before('<div class="alert alert-danger alert-dismissible fade in" role="alert">'
						+ '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>'
						+ 'Erreur</div>');
					next.remove();
				}
			});
		});
	</script>
{% endblock %}