<?php

namespace AmbigussBundle\Repository;

/**
 * PhraseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhraseRepository extends \Doctrine\ORM\EntityRepository
{
    public function getClassementPhrases($limit){
	    return $this->createQueryBuilder('p')->select("p.id, p.contenu, p.dateCreation ")->distinct()
		    ->addSelect('(SELECT COUNT(lp2.id) FROM AmbigussBundle\Entity\AimerPhrase lp2 WHERE lp2.phrase = p.id AND lp2.active = 1) as nbLikes')
		    ->leftJoin("p.likesPhrase", "lp", 'WITH', 'lp.id = p.id')
		    ->leftJoin("p.parties", "pa", 'WITH', 'pa.phrase = p.id')->addSelect('sum(pa.gainCreateur) as nbPoints')
            ->groupBy('p.id')
            ->orderBy('nbLikes', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

	public function getClassementPhrasesUser($user)
	{
		return $this->createQueryBuilder('p')->select('p.contenu, p.dateCreation')->distinct()
			->addSelect('(SELECT COUNT(lp2.id) FROM AmbigussBundle\Entity\AimerPhrase lp2 WHERE lp2.phrase = p.id AND lp2.active = 1) as nbLikes')
			->leftJoin("p.likesPhrase", "lp", 'WITH', 'lp.id = p.id')
			->leftJoin("p.parties", "pa", 'WITH', 'pa.phrase = p.id')->addSelect('sum(pa.gainCreateur) as nbPoints')
			->where('p.auteur = :user')->setParameter('user', $user)
			->groupBy('p.id')
			->orderBy('nbPoints', 'DESC')
			->getQuery()->getResult();
	}

    public function getSignale()
    {
        return $this->createQueryBuilder('g')
            ->innerJoin('g.auteur', 'a', 'WITH', 'g.auteur = a.id')->addSelect('a')
            ->leftJoin('g.modificateur', 'm', 'WITH', 'g.modificateur = m.id')->addSelect('m')
            ->where('g.signale = 1')
            ->andWhere('g.visible=1')
            ->getQuery()->getResult();
    }

	/**
	 * Retoune un tableau de tableau avec un champ correspondant à l'id d'une phrase non joué et existante depuis plus de $dureeAv par le membre
	 *
	 * @param $membre
	 * @param $maxResult
	 * @param $dureeAvantJouabiliteSecondes
	 *
	 * @return array
	 */
	public function findIdPhrasesNotPlayedByMembre($membre, $dureeAvantJouabiliteSecondes)
	{
		$date = new \DateTime();
		$dateMin = $date->setTimestamp($date->getTimestamp() - $dureeAvantJouabiliteSecondes);

		$sub = $this->_em->getRepository('AmbigussBundle:Partie')->createQueryBuilder('pa')
			->select('identity(pa.phrase)')
			->where('pa.joueur = :membre')
			->andWhere('pa.joue = 1');

		$q = $this->createQueryBuilder('ph');

		return $q->select('ph.id')
			->where($q->expr()->notIn('ph.id', $sub->getDQL()))
			->andWhere('ph.dateCreation < :dateMin')
			->setParameter('dateMin', $dateMin->format('Y-m-d H:i:s'))
			->setParameter('membre', $membre)
			->getQuery()->getArrayResult();
	}
}
