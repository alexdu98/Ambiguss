{% extends 'base.html.twig' %}

{% block title %}Jeu{% endblock %}
{% block titre %}<h1>Jouons !</h1>{% endblock %}
{% block contenu %}
	<div class="row">
		<div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 bulle">
			{% if app.user is null %}
				<p class="text-success">
					<b>
						<a href="{{ path('user_connexion') }}">Connectez-vous</a>
						pour enregistrer vos parties et avoir accès à toutes les fonctionnalités !
					</b>
				</p>
			{% endif %}

			{% if alreadyPlayed %}
				<p class="text-warning">Vous avez déjà joué cette phrase, vous ne gagnerez donc pas de points.</p>
			{% endif %}

			{% for flashMessage in app.session.flashbag.get('succes') %}
				<div class="alert alert-success">{{ flashMessage }}</div>
			{% endfor %}
			{% for flashMessage in app.session.flashbag.get('erreur') %}
				<div class="alert alert-danger">{{ flashMessage }}</div>
			{% endfor %}
			<h3 id="result"></h3>
			<div class="form-group">
				{% if app.user %}
					<button id="phraseLike" class="btn btn-{% if liked %}primary{% else %}default{% endif %} btn-xs">
						<i class="fa fa-thumbs-up" aria-hidden="true"></i>
						J'aime cette phrase
					</button>
					<button id="phraseSignal" class="btn btn-danger btn-xs" data-toggle="modall" data-target="#modal">
						<i class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></i>
						Signaler un élément
					</button>
				{% endif %}
			</div>
			<br>
			{{ form_start(form, {'attr' : {'class' : 'form-horizontal'}}) }}

			{{ form_errors(form) }}
			<div class="form-group">
				<div id="ambigussbundle_game_reponses" data-prototype="
	                {{ include('AmbigussBundle:Game:reponse.prot.html.twig', {form: form.reponses.vars.prototype})|e
				('html_attr') }}
	                "></div>
				{% do form.reponses.setRendered %}
			</div>
			<br>
			<div class="form-group">
				{{ form_widget(form.valider) }}
				<a href="{{ path('ambiguss_game') }}" class="btn btn-default">Passer cette
					phrase</a>
			</div>
			{{ form_rest(form) }}
			{{ form_end(form) }}
		</div>
	</div>
	<button type="button" class="pull-right infobulle" data-toggle="modal" data-target="#modal" id="helpGameModal">
		<img src="{{ asset('assets/images/infobulle.png') }}">
	</button>
{% endblock %}
{% block js %}
	<script>
		$(document).ready(function () {
			var endBaliseAmbiguEscape = '<\/amb>';

			// Regex pour avoir les contenus des balises <amb> et leurs id
			// Exemple : L'<amb id="1">avocat</amb> mange des <amb id="2">avocats</amb>.
			// Donne : $1 = 1 et $2 = avocat, puis $1 = 2 et $2 = avocats
			var reg2 = new RegExp('<amb id=\"([0-9]+)\">(.*?)' + endBaliseAmbiguEscape, 'g');

			var phrase = "{{ phraseEscape|raw }}";
			var rendu = $("#result");
			var res;

			// Div où Symfony a mis le formulaire (voir cours sur les formulaires imbriqués)
			var $container = $('div#ambigussbundle_game_reponses');

			// Compte le nombre d'occurence de balise <amb id="">
			var replaced = phrase.search(reg2) >= 0;
			// Si au moins 1
			if (replaced) {
				html = '<b num="__num__" class="color-red" title="Ce mot est ambigu (id : __num__)' +
					'">__amb__</b>';
				// On remplace la balise <amb id=""> par le html en remettant l'id du mot ambigu
				res = phrase.replace(reg2, function ($0, $1, $2) {
					return html.replace(/__num__/g, $1).replace(/__amb__/g, $2);
				});
			}

			rendu.append(res);

			var motsAmbigus = $.parseJSON('{{ motsAmbigus | raw }}');

			var index = 1;

			for (ma in motsAmbigus) {
				addReponse($container, motsAmbigus[ma]);
			}

			// Ajoute le formulaire d'un mot ambigu (voir cours sur les formulaires imbriqués)
			function addReponse($container, motAmbiguPhrase) {
				// On ajoute le nom unique et l'id
				var template = $container.attr('data-prototype')
					.replace(/__name__label__/g, '')
					.replace(/__name__/g, index)
					.replace(/__motAmbigu__/g, motAmbiguPhrase[0].trim())
					.replace(/__ordre__/g, motAmbiguPhrase[2])
					.replace(/__id__/g, index);
				var $prototype = $(template);
				// Trouve la balise qui à la class amb
				var idMotAmbiguPhrase = $prototype.find('.idMotAmbiguPhrase');
				idMotAmbiguPhrase.val(motAmbiguPhrase[1]);
				addAddGloseButton($prototype, motAmbiguPhrase[0], addGloseButtonIsClicked);
				getGloses($prototype.find('select.gloses'), motAmbiguPhrase[0]);
				$container.append($prototype);
				index++;
			}

			function addGloseButtonIsClicked(event) {
				setModalTitle('Ajouter une glose à "' + event.data.motAmbigu + '"');
				{% if app.user is empty %}
				messageNeedConnectionModal();
				{% else %}
				setModalBody('{{ include('AmbigussBundle:Glose:add.html.twig', {'form': addGloseForm})|e('js') }}');
				addGloseModal(event);
				{% endif %}
			}

			$("#phraseLike").click(function () {
				var boutonLike = $(this);
				$.getJSON('{{ path('ambiguss_phrase_like', {'id':phrase_id}) }}', function (data) {
					if (data.status === 'succes') {
						if (data.action === 'like' || data.action === 'relike') {
							boutonLike.removeClass('btn-default').addClass('btn-primary');
						} else {
							boutonLike.removeClass('btn-primary').addClass('btn-default');
						}
					}
				});
			});

			$("#phraseSignal").click(function () {
				var boutonSignal = $(this);
				setModalTitle('Signaler un élément');
				setModalBody('{{ include('JudgmentBundle:Signalement:add.html.twig', {'form': addJugementForm})|e('js') }}');
				$("#modal").modal("show");

				// On envoit le formulaire par ajax
				$('form[name="jugement_add"]').ajaxForm({
					beforeSubmit: function (arr, form, opt) {
						// On affiche l'image laoding en attendant la réponse
						$(form).after('<img src="' + urlImageLoading + '" id="loading">');
					},
					// Quand la réponse Ajax sera reçu, on appelle ce callback
					success: function (data, status, xhr, form) {

					},
					error: function () {
						loading = $("#loading");
						next = loading.prev().nextAll();
						loading.before('<span class="text-danger">Erreur</span>');
						next.remove();
					}
				});
			});

			// Au click sur le bouton, exécute la fonction
			$('#helpGameModal').click(helpGameModal);
			function helpGameModal(event) {
				setModalSize('modal-lg');
				setModalTitle('Comment les phrases sont-elles choisies ?');
				setModalBody(
					'<h4>Connecté</h4>'
					+ 'Prend les 100 phrases les plus anciennes que vous n\'avez pas encore joué et en tire une au hasard.<br>'
					+ 'Si toutes les phrases ont été jouées, en tire une au hasard parmis toutes les phrases existantes.<br>'
					+ '<h4>Non connecté</h4>'
					+ 'Prend les 100 phrases les plus anciennes que votre IP n\'a pas joué depuis plus de 3 jours et en tire une au hasard.<br>'
					+ 'Si toutes les phrases ont été jouées, en tire une au hasard parmis toutes les phrases existantes.<br><br>'
					+ '<div class="alert alert-info">Si vous passez la phrase, vous appliquez le même algorithme, '
					+ 'ce qui peut donc redonner la même phrase, s\'il ne vous reste pas beacoup de phrases non jouées par exemple.</div>'
				);
			}
		});
	</script>
{% endblock %}