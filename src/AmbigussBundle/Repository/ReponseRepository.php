<?php

namespace AmbigussBundle\Repository;

/**
 * ReponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReponseRepository extends \Doctrine\ORM\EntityRepository
{

	/**
	 * Retourne un tableau avec le nombre de votes pour la glose donnÃ©e
	 * @param $idPMA
	 * @param $glose
	 *
	 * @return mixed
	 */
	public function findByIdPMAetGloses($idPMA, $glose)
	{
		return $this->createQueryBuilder('r')
			->innerJoin("r.motAmbiguPhrase", "map", "WITH", "r.motAmbiguPhrase = map.id")
			->innerJoin("r.glose", "g", "WITH", "r.glose = g.id")->Select("count(g) as nbVotes")
			->innerJoin("r.poidsReponse", "pr", "WITH", "r.poidsReponse = pr.id")
			->where("map.id = :Ambi")->setParameter("Ambi", $idPMA)
			->andwhere("g.id = :Gl")->setParameter("Gl", $glose)
			->andWhere("pr.poidsReponse = 1")
			->getQuery()->getSingleResult();
	}

    public function findforExport($phrase, $Ma, $G)
    {
        return $this->createQueryBuilder('r')
            ->select('r.contenuPhrase, r.valeurMotAmbigu,r.valeurGlose')
            ->addSelect('count(r) as NombreDeReponsePourCetteGloses')
            ->where('r.contenuPhrase = :phrase')
            ->andWhere('r.valeurMotAmbigu = :mamb')
            ->andWhere('r.valeurGlose = :glose')
            ->setParameter('phrase',$phrase)
            ->setParameter('mamb',$Ma)
            ->setParameter('glose',$G)
            ->getQuery()->getResult();
    }
    public function findGlosesforExport($phrase, $Ma)
    {
        return $this->createQueryBuilder('r')
            ->select('distinct r.valeurGlose')
            ->where('r.contenuPhrase = :phrase')
            ->andWhere('r.valeurMotAmbigu = :mamb')
            ->setParameter('phrase',$phrase)
            ->setParameter('mamb',$Ma)
            ->getQuery()->getResult();
    }
    public function findReponsesforExport($phrase, $Ma)
    {
        return $this->createQueryBuilder('r')
            ->select('count(r) as nbt')
            ->where('r.contenuPhrase = :phrase')
            ->andWhere('r.valeurMotAmbigu = :mamb')
            ->setParameter('phrase',$phrase)
            ->setParameter('mamb',$Ma)
            ->getQuery()->getSingleResult();
    }



}
