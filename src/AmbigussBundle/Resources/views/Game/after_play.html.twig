{% extends 'base.html.twig' %}

{% block title %}resultat{% endblock %}
{% block titre %}Résultat de la partie{% endblock %}
{% block contenu %}
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 bulle">
	        {% for flashMessage in app.session.flashbag.get('succes') %}
                <div class="alert alert-success">{{ flashMessage }}</div>
	        {% endfor %}
	        {% for flashMessage in app.session.flashbag.get('erreur') %}
                <div class="alert alert-danger">{{ flashMessage }}</div>
	        {% endfor %}

	        {% if app.user is null %}
		        <p class="text-success">
			        <b>
				        <a href="{{ path('user_connexion') }}">Connectez-vous</a>
				        pour enregistrer vos parties et avoir accès à toutes les fonctionnalités !
			        </b>
		        </p>
	        {% endif %}

	        <h3 id="result">
		        {% if app.user %}
			        {% if alreadyPlayed %}
				        Vous avez déjà joué cette phrase, vous ne gagnez donc pas de points.
			        {% else %}
				        {% transchoice nb_point %}
					        {0} Dommage, vous n'avez pas gagné de point cette fois. |
					        {1} Bravo, vous avez gagné 1 point. |]1,
					        Inf[ Félicitation, vous avez gagné <span id="fun-level" style="color: red;">0 </span> points !

				        {% endtranschoice %}
						<div >
							<img src="{{ asset('avogif.gif') }} " alt="gif">
						</div>
			        {% endif %}
		        {% else %}
			        Vous n'êtes pas connecté, vous ne gagnez donc pas de points
		        {% endif %}
	        </h3>
			<br>
	        <h4><span class="color-green">La phrase était :</span><br> {{ phrase|raw }}</h4>
	        <h5>par <a href="#">{{ auteur.pseudo }}</a></h5>
	        <br>
	        <div class="text-center">
		        <ul><h4><span class="color-green">Les votes précédents étaient :</span></h4>
		        {% for ordre, ma in stats %}
			        <li class="not-list"><b class="color-red" title="Ce mot est ambigu (id : {{ ordre }})">{{ ma.valeurMA }}</b>
				        :
				        {% for valeurGlose, res in ma.gloses %}
					        {% if res.isSelected %}<b>{% endif %}
					            {{ valeurGlose ~ ' ' ~ res.nbVotes }}
					        {% if res.isSelected %}</b>{% endif %}
							{% if loop.last %}.{% else %},{% endif %}
				        {% endfor %}
			        </li>
		        {% endfor %}
		        </ul>
	        </div>
	        <br>
            <a href="{{ path('ambiguss_game') }}" class="btn btn-primary">Rejouer</a>
        </div>
    </div>
	<button type="button" class="pull-right infobulle" data-toggle="modal" data-target="#modal" id="helpResultatModal">
		<img src="{{ asset('assets/images/infobulle.png') }}">
	</button>
{% endblock %}

{% block js %}
	<script>
		$(document).ready(function()
		{
			// Au click sur le bouton, exécute la fonction
			$('#helpResultatModal').click(helpResultatModal);
			function helpResultatModal(event) {
				setModalSize('modal-lg');
				setModalTitle('Comment sont calculés les points ?');
				setModalBody(
					'La formule du calcul des points et des crédits est la suivante :<br>'
					+ '<span class="text-primary">On additionne pour chaque glose son pourcentage de votes.</span><br><br>'
					+ '<b>Exemple :</b><br>'
					+ 'Un <b class="color-red" title="Ce mot est ambigu">avocat</b> mange '
					+ 'des <b class="color-red" title="Ce mot est ambigu">avocats</b>.<br>'
					+ 'Imaginons que l\'on réponde "métier" pour "avocat" et que cette glose corresponde à 80% des réponses '
					+ 'et que l\'on réponde "fruit" pour "avocats" et que cette glose correponde à 95% des réponses.<br><br>'
					+ 'Le calcul est donc : 80 + 95 = 175.<br>'
					+ 'Vous gagnerez alors 175 points et 175 crédits.'
				);
			}
		});


	</script>

	<script>

        /** @preserve jQuery animateNumber plugin v0.0.14
         * (c) 2013, Alexandr Borisov.
         * https://github.com/aishek/jquery-animateNumber
         */

        (function($) {
            var reverse = function(value) {
                return value.split('').reverse().join('');
            };

            var defaults = {
                numberStep: function(now, tween) {
                    var floored_number = Math.floor(now),
                        target = $(tween.elem);

                    target.text(floored_number);
                }
            };

            var handle = function( tween ) {
                var elem = tween.elem;
                if ( elem.nodeType && elem.parentNode ) {
                    var handler = elem._animateNumberSetter;
                    if (!handler) {
                        handler = defaults.numberStep;
                    }
                    handler(tween.now, tween);
                }
            };

            if (!$.Tween || !$.Tween.propHooks) {
                $.fx.step.number = handle;
            } else {
                $.Tween.propHooks.number = {
                    set: handle
                };
            }

            var extract_number_parts = function(separated_number, group_length) {
                var numbers = separated_number.split('').reverse(),
                    number_parts = [],
                    current_number_part,
                    current_index,
                    q;

                for(var i = 0, l = Math.ceil(separated_number.length / group_length); i < l; i++) {
                    current_number_part = '';
                    for(q = 0; q < group_length; q++) {
                        current_index = i * group_length + q;
                        if (current_index === separated_number.length) {
                            break;
                        }

                        current_number_part = current_number_part + numbers[current_index];
                    }
                    number_parts.push(current_number_part);
                }

                return number_parts;
            };

            var remove_precending_zeros = function(number_parts) {
                var last_index = number_parts.length - 1,
                    last = reverse(number_parts[last_index]);

                number_parts[last_index] = reverse(parseInt(last, 10).toString());
                return number_parts;
            };

            $.animateNumber = {
                numberStepFactories: {
                    /**

                     *
                     * @params {String} suffix string to append to animated number
                     * @returns {Function} numberStep-compatible function for use in animateNumber's parameters
                     */
                    append: function(suffix) {
                        return function(now, tween) {
                            var floored_number = Math.floor(now),
                                target = $(tween.elem);

                            target.prop('number', now).text(floored_number + suffix);
                        };
                    },

                }
            };

            $.fn.animateNumber = function() {
                var options = arguments[0],
                    settings = $.extend({}, defaults, options),

                    target = $(this),
                    args = [settings];

                for(var i = 1, l = arguments.length; i < l; i++) {
                    args.push(arguments[i]);
                }

                // needs of custom step function usage
                if (options.numberStep) {
                    // assigns custom step functions
                    var items = this.each(function(){
                        this._animateNumberSetter = options.numberStep;
                    });

                    // cleanup of custom step functions after animation
                    var generic_complete = settings.complete;
                    settings.complete = function() {
                        items.each(function(){
                            delete this._animateNumberSetter;
                        });

                        if ( generic_complete ) {
                            generic_complete.apply(this, arguments);
                        }
                    };
                }

                return target.animate.apply(target, args);
            };

        }(jQuery));

	</script>

    <script>
        var number_step = $.animateNumber.numberStepFactories.append(' ');

        $('#fun-level').animateNumber(
            {
                number: {{ nb_point }},
                style: "color: black",
                'font-size': '30px',
                easing: 'easeInQuad',
                numberStep:number_step
            },
            1000
        );

	</script>
{% endblock %}